if has('win32') || has('win64')
  set runtimepath=$HOME/_vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/_vim/after
  set nobackup
  set noswapfile
endif

" Save all backups here, rather than spreading around the file system.
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp,%TEMP%
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp,%TEMP%

set noswapfile
set nobackup

set ignorecase
set splitbelow
set splitright
set ruler  " Ruler on
set number
set nowrap  " Line wrapping off
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)
" set list
" set listchars=trail:Â·

set tabstop=2  " Tabs are 2 spaces
set backspace=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent

set cindent
set autoindent
set smarttab
set expandtab

set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.

set mouse=a " enable mouse clicks on folders/files in nerdtree

set wildmenu " make tab completion more like bash
set wildignore=*.swp
set wildmode=list:longest

filetype plugin on
syntax on

"Auto size the active window
let &winheight = &lines * 7/10
let &winwidth = &columns * 7/10

" Disable beeping and blinking on error
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

set hlsearch      " highlight all occurrences of search term
:highlight clear Search
:highlight Search term=reverse ctermfg=0 ctermbg=3 guibg=Yellow
set ignorecase    " ignore case when searching

if has("autocmd")
  filetype indent on
  autocmd FileType html,css setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType ruby,cucumber,haml setlocal expandtab shiftwidth=2 softtabstop=2
  autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
  autocmd FileType php setlocal shiftwidth=2 tabstop=2
  autocmd FileType markdown setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 wrap nolist
  autocmd BufRead,BufNewFile *.jsx.erb set filetype=eruby.javascript

  " stitch fix specific
  autocmd BufRead,BufNewFile *.survey set filetype=ruby
endif

set nocompatible              " be iMproved, required
filetype off                  " required
" clear hls on return
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

function! RunTests(filename)
" Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo
    exec ":!bundle exec rspec " . a:filename
endfunction

function! SetTestFile()
" Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! SetTestLine(line)
  let t:grb_test_line=a:line
endfunction

function! RunTestFile(...)
  let in_spec_file = match(expand("%"), '_spec.rb$') != -1
  if a:0
    if in_spec_file
      call SetTestLine(a:1)
    endif
    if exists("t:grb_test_line")
      let command_suffix = t:grb_test_line
    else
      let command_suffix = ""
    endif
  else
    let command_suffix = ""
  endif
" Run the tests for the previously-marked file.
  if in_spec_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number)
endfunction

function! SetFeatureFile()
  let t:grb_feature_file=@%
endfunction

function! RunFeatureTest()
  let in_feature_file = match(expand("%"), '.feature$') != -1
" Run the tests for the previously-marked file.
  if in_feature_file
    call SetFeatureFile()
  elseif !exists("t:grb_feature_file")
    return
  end

  :w
  :silent !echo;echo;echo;echo;echo
  exec ":!cucumber " . t:grb_feature_file
endfunction

" Run this file
" map <leader>t :call RunTestFile()<cr>
" Run only the example under the cursor
" map <leader>T :call RunNearestTest()<cr>
" Run cucumber wip
" map <leader>f :w\|:!cucumber -p wip<cr>
map ,t :call RunTestFile()<cr>
map ,T :call RunNearestTest()<cr>
map ,w :w\|:!cucumber -p wip<cr>
map ,f :call RunFeatureTest()<cr>

" set the runtime path to include Vundle and initialize

if has('win32') || has('win64')
  set rtp+=%HOME%\vimfiles\bundle\Vundle.vim
else
  set rtp+=~/.vim/bundle/Vundle.vim
endif
call vundle#begin()


" Quickly delete trailing spaces and tab characters turning the tabs into 4 spaces
function! ClearAllTrailingSpaces()
  %s/\s\+$//
endfunction

nmap ,s :call ClearAllTrailingSpaces()<cr>

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'othree/html5.vim'
Plugin 'ctrlp.vim'
Plugin 'rails.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'peterhoeg/vim-qml'
Plugin 'mkitt/tabline.vim'
Plugin 'zivyangll/git-blame.vim'
" Experimental plugins
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/nerdtree-ack'
Plugin 'pgr0ss/vim-github-url'

call vundle#end()            " required
filetype plugin indent on    " required

map <C-n> :NERDTreeToggle<CR>
imap jj <ESC>

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|platforms\|plugins'
let g:gh_line_map_default = 0
let g:gh_line_map = '<leader>hu'

set guitablabel=%N/\ %t\ %M

nmap ,n :NERDTreeFind<CR>

function Cheat()
  echo "C-^    | Open previous file"
  echo "C-p    | Find file name (ctrlp.vim)"
  echo "C-n    | Open nerdtree (nerdtree)"
  echo ",n     | Select the current file in nerdtree (nerdtree)"
  echo ",s     | Clear all trailing spaces (vimrc/ClearAllTrailingSpaces())"
  echo "mm     | Rename highlighted file or directory in nerdtree (nerdtree)"
  echo "ms     | Search highlighted directory in nerdtree (nerdtree-ack)"
  echo ":Blame | Show git blame (git-blame)"
endfunction

command Cheat :call Cheat()
command Blame :call gitblame#echo()
